#!/bin/bash
#
# consul        Manage the consul agent
#
# chkconfig:   2345 95 95
# description: Consul is a tool for service discovery and configuration
# processname: consul
# config: /etc/consul.d
# pidfile: /var/run/consul.pid

### BEGIN INIT INFO
# Provides:       consul
# Required-Start: $local_fs $network
# Required-Stop: $network
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: Manage the consul agent
# Description: Consul is a tool for service discovery and configuration
### END INIT INFO

# source function library
. /etc/rc.d/init.d/functions

prog="consul"
user="consul"
exec="/usr/bin/$prog"
pidfile="/var/run/$prog.pid"
lockfile="/var/lock/subsys/$prog"
logfile="/var/log/$prog"

# pull in sysconfig settings
[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

export GOMAXPROCS=${GOMAXPROCS:-2}
export MAXWAIT=${MAXWAIT:-10}

get_port() {
    # get port number from the consul config file and assign to a variable
    # passed in as the first argument
    #
    # usage: get_port var_name
    local __setvar=$1
    local config_dir
    local config_file
    local port

    config_dir="${CONFIG_DIR:-/etc/consul.d}"

    if [ -d "${config_dir}" ]; then
        config_file=$(find "${config_dir}" -name \*.json)
        if [ -f "${config_file}" ]; then
            # grab port number from json file with some awk magic
            port=$(
              /bin/awk '
                /ports/ {
                  for (i = 1; i <= NR; i++) {
                    getline
                    if (/http/) {
                      print $2
                    }
                  }
                }
              ' "${config_file}"
            )
            port="${port%,}" # strip any trailing commas
        fi
    fi

    eval $__setvar="${port:-8500}"
}


start() {
    [ -x $exec ] || exit 5

    umask 077

    touch $logfile $pidfile
    chown $user:$user $logfile $pidfile

    echo -n $"Starting $prog: "

    ## holy shell shenanigans, batman!
    ## daemon can't be backgrounded.  we need the pid of the spawned process,
    ## which is actually done via runuser thanks to --user.  you can't do "cmd
    ## &; action" but you can do "{cmd &}; action".
    daemon \
        --pidfile=$pidfile \
        --user=$user \
        " { $exec $CMD_OPTS &>> $logfile & } ; echo \$! >| $pidfile "

    RETVAL=$?

    [ $RETVAL -eq 0 ] && touch $lockfile

    local pid=$(< ${pidfile})
    local curwait=0
    local ready=0
    local consul_port

    # assign $consul_port based on what the `get_port` func returns
    get_port consul_port

    while checkpid ${pid} && [ $curwait -lt ${MAXWAIT} ] && [ $ready -ne 1 ]; do
        if netstat -nptl | grep -q "^tcp.*:${consul_port}.*LISTEN \+${pid}\/${prog}"; then
            ready=1
        else
           sleep 1
        fi

        (( curwait++ ))
    done

    if [ $ready -eq 1 ]; then
        RETVAL=0
        success
    else
       RETVAL=1
       failure
    fi

    echo
    return $RETVAL
}

stop() {
    echo -n $"Shutting down $prog: "
    ## graceful shutdown with SIGINT
    killproc -p $pidfile $exec -INT
    RETVAL=$?

    if [ $RETVAL -eq 0 ]; then
        local pid=$(< ${pidfile})
        local curwait=0
        local shut=0

        while [ $curwait -lt ${MAXWAIT} ] && [ $shut -ne 1 ]; do
            if ! checkpid ${pid}; then
                shut=1
            else
                sleep 1
            fi

            (( count++ ))
        done

        if [ $shut -ne 1 ]; then
            RETVAL=125
        fi
    fi

    if [ $RETVAL -eq 0 ]; then
        rm -f $lockfile $pidfile
        success
    else
        failure
    fi

    echo
    return $RETVAL
}

restart() {
    stop
    start
}

reload() {
    echo -n $"Reloading $prog: "
    killproc -p $pidfile $exec -HUP
    echo
}

force_reload() {
    restart
}

rh_status() {
    status -p "$pidfile" -l $prog $exec
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac

exit $?
